.. _xyacc:

xyacc: Build an SPP language parser
===================================

**Package: softools**

.. raw:: html

  <section id="s_usage">
  <h3>Usage</h3>
  <p>
  xyacc [ options ] <span style="font-family: monospace;">" file"</span>
  </p>
  </section>
  <section id="s_options">
  <h3>Options</h3>
  <dl>
  <dt><b>-b <i>file_prefix</i></b></dt>
  <!-- Sec='OPTIONS' Level=0 Label='' Line='-b \fIfile_prefix\fR' -->
  <dd>Specify a file_prefix for output files
  </dd>
  </dl>
  <dl>
  <dt><b>-d</b></dt>
  <!-- Sec='OPTIONS' Level=0 Label='' Line='-d' -->
  <dd>Also produce a header file <b>y.tab.h</b>.
  </dd>
  </dl>
  <dl>
  <dt><b>-l</b></dt>
  <!-- Sec='OPTIONS' Level=0 Label='' Line='-l' -->
  <dd>Don't generate '#line' directives
  </dd>
  </dl>
  <dl>
  <dt><b>-p <i>sym_prefix</i></b></dt>
  <!-- Sec='OPTIONS' Level=0 Label='' Line='-p \fIsym_prefix\fR' -->
  <dd>Prepend sym_prefix to the external symbols
  </dd>
  </dl>
  <dl>
  <dt><b>-P <i>parser</i></b></dt>
  <!-- Sec='OPTIONS' Level=0 Label='' Line='-P \fIparser\fR' -->
  <dd>Specify parser file (default <b>boot$xyacc/yaccpar.x</b>)
  </dd>
  </dl>
  <dl>
  <dt><b>-Q<i>(y/n)</i></b></dt>
  <!-- Sec='OPTIONS' Level=0 Label='' Line='-Q\fI(y/n)\fR' -->
  <dd>Flag for version stamping. The <b>-Qy</b> option puts the version
  stamping information in <b>y.tab.c</b>. This allows you to know what
  version of yacc built the file. The <b>-Qn</b> option (the default)
  writes no version information.
  </dd>
  </dl>
  <dl>
  <dt><b>-t</b></dt>
  <!-- Sec='OPTIONS' Level=0 Label='' Line='-t' -->
  <dd>Compiles runtime debugging code by default.
  </dd>
  </dl>
  <dl>
  <dt><b>-v</b></dt>
  <!-- Sec='OPTIONS' Level=0 Label='' Line='-v' -->
  <dd>Prepares the file <b>y.output</b>, which contains a description of the
  parsing tables and a report on conflicts generated by ambiguities in
  the grammar.
  </dd>
  </dl>
  <dl>
  <dt><b>-V</b></dt>
  <!-- Sec='OPTIONS' Level=0 Label='' Line='-V' -->
  <dd>Output version information and exit
  </dd>
  </dl>
  <dl>
  <dt><b>-Y <i>dir</i></b></dt>
  <!-- Sec='OPTIONS' Level=0 Label='' Line='-Y \fIdir\fR' -->
  <dd>Specify location of <b>yaccpar.x</b> (default <b>boot$xyacc</b>).
  </dd>
  </dl>
  </section>
  <section id="s_description">
  <h3>Description</h3>
  <p>
  This is a version of yacc that has been modified to produce SPP
  language parsers.  For the most part, it should follow the operation
  of standard yacc, with the differences noted below.  This version of
  XYACC is based on code obtained from the OpenSolaris project. See the
  man page for yacc for options.
  <br>
  This is a version of yacc that has been modified to produce SPP
  language parsers.  For the most part, it should follow the operation
  of standard yacc, with the differences noted below.
  <br>
  Input files should follow the yacc convention of ending in <b>.y</b>.
  </p>
  </section>
  <section id="s_differences">
  <h3>Differences</h3>
  <p>
  <b>(1)</b>
  The Yacc input syntax is unmodified, except that the comment
  convention is now as in SPP, rather than C (i.e., use #, rather than
  /*..*/).  All defines, actions, etc. are of course given in the SPP
  language.
  </p>
  <p>
  <b>(2)</b> 
  The Yacc output file is <span style="font-family: monospace;">"ytab.x"</span>, rather than <span style="font-family: monospace;">"y.tab.c"</span>.  The token
  defs file <span style="font-family: monospace;">"y.tab.h"</span> now contains SPP defines, rather than C #defines.
  The states file <span style="font-family: monospace;">"y.output"</span> is completely unmodified.
  </p>
  <p>
  <b>(3)</b> 
  The global declarations section %{ .. %} had to be changed somewhat
  because SPP does not have global variables.  The section is now
  divided into two subsections.  The first is for global defines,
  includes, etc. which go into the header area of the ytab.x file.  Then
  follows a %L, telling Yacc that the local declarations for the parser
  procedure follow.  This second section should contain variable and
  function declarations required for the user supplied actions (code
  fragments to be executed when a rule of the grammar is recognized) in
  the yyparse procedure.
  </p>
  <p>
  <b>(4)</b> 
  The global declarations section MUST contain the following two
  defines:
  </p>
  <dl>
  <dt><b></b></dt>
  <!-- Sec='DIFFERENCES' Level=0 Label='' Line=' ' -->
  <dd>YYMAXDEPTH
  Depth of the parser stacks; determines the maximum complexity of a
  language construct which can be parsed.  A typical value is 150.
  </dd>
  </dl>
  <dl>
  <dt><b></b></dt>
  <!-- Sec='DIFFERENCES' Level=0 Label='' Line=' ' -->
  <dd>YYOPLEN
  The length, in struct units, of a token operand value structure.  You
  define the operand structure to be whatever you wish; all the parser
  needs to know is how big an element is.  The lexical analyzer and the
  actions, both of which are supplied by the user, use the operand
  structure for communications.  Operand structures are always referred
  to by a Mem pointer.
  </dd>
  </dl>
  </section>
  <section id="s_see_also">
  <h3>See also</h3>
  <p>
  xpp, rpp, generic, mkpkg
  </p>
  
  </section>
  
  <!-- Contents: 'NAME' 'USAGE' 'OPTIONS' 'DESCRIPTION' 'DIFFERENCES' 'SEE ALSO'  -->
  
